{"version":3,"sources":["minesweeper-components/Tile.js","minesweeper-components/Board.js","minesweeper-components/Minesweeper.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","row","col","value","tile","revealed","mine","mineCount","flag","getValue","style","styling","getStyling","className","onClick","clickHandler","onContextMenu","contextHandler","onMouseDown","onMouseUp","Board","state","theBoard","initTempBoard","rows","cols","gameStarted","tileLeftClickedHandler","bind","tileRightClickedHandler","longClickPress","longClickRelease","console","log","this","stopTimer","resetTimer","resetFlags","setState","i","push","j","max","Math","floor","random","theRow","theCol","r","c","mines","m","getRandomInt","checkProximity","temp","numMines","checkSurroundingArea","map","uncoverEmptyTiles","longClickTimer","setTimeout","clearTimeout","increment","decrement","findRevealedTiles","alert","resetBoard","initRealBoard","createEmptyBoard","document","addEventListener","event","preventDefault","xpos","ypos","placeMines","findMines","startTimer","Component","Minesweeper","flags","time","start","boardElement","React","createRef","changeDifficulty","f","window","screen","width","prevState","difficulty","current","Date","now","timer","setInterval","clearInterval","colSpan","DropdownButton","id","title","Dropdown","Item","eventKey","onSelect","ref","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.42055bc5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n/* Child Component of Board */\r\nfunction Tile(props) {\r\n\r\n    /* Assigns a className for the tile to be styled appropriately */\r\n    function getStyling(value) {\r\n\r\n        let styling = \"tile\";\r\n\r\n        switch(value) {\r\n\r\n            case \"\": \r\n                styling = \"tile empty\";\r\n                break;\r\n\r\n            case 1:\r\n                styling = \"tile blue\";\r\n                break;\r\n\r\n            case 2:\r\n                styling = \"tile green\";\r\n                break;\r\n\r\n            case 3:\r\n                styling = \"tile red\";\r\n                break;\r\n\r\n            case 4:\r\n                styling = \"tile darkblue\";\r\n                break;\r\n\r\n            case 5:\r\n                styling = \"tile darkred\";\r\n                break;\r\n                \r\n            case 6:\r\n                styling = \"tile bluegreen\";\r\n                break;\r\n\r\n            case 7:\r\n                styling = \"tile black\";\r\n                break;\r\n\r\n            case 8:\r\n                styling = \"tile darkgrey\";\r\n                break;\r\n\r\n            case \"M\":\r\n                styling = \"tile mine\";\r\n                break;\r\n\r\n            case \"F\":\r\n                styling = \"tile flag\";\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return styling;\r\n    }\r\n\r\n    /* Gets the value associated with this tile */\r\n    function getValue() {\r\n\r\n        const{tile} = props;\r\n\r\n        /* If tile hasn't been revealed... */\r\n        if(!tile.revealed) {\r\n            \r\n            /* ... and doesn't have a flag show nothing  */\r\n            if(!tile.flag) {\r\n                return null;\r\n            }\r\n\r\n            /* ... and DOES have a flag, display flag */\r\n\r\n            return \"F\";\r\n        }\r\n\r\n        /* If the tile is a mine, show that its a mine */\r\n        if(tile.mine) {\r\n            return \"M\";\r\n        }\r\n\r\n        /* If tile is empty, show empty tile */\r\n        if(tile.mineCount === 0) {\r\n            return \"\";\r\n        }\r\n\r\n        /* Else show the tiles value */\r\n        return tile.mineCount;\r\n    }\r\n\r\n    let {row, col} = props;\r\n\r\n    let value = getValue();\r\n    let style = getStyling(value);\r\n\r\n    /* Returns an individual tile with, what to do on left/right click and its vale */\r\n    return (\r\n\r\n        <td className={style}\r\n            onClick={() => props.clickHandler(row, col)}\r\n            onContextMenu={() => props.contextHandler(row, col)}\r\n            onMouseDown={() => props.onMouseDown(row, col)}\r\n            onMouseUp={() => props.onMouseUp()}\r\n        >\r\n            {value}\r\n        </td>\r\n    )\r\n}\r\n\r\nexport default Tile\r\n","import React, { Component } from 'react'\r\nimport Tile from './Tile'\r\n\r\n/* Child Component */\r\nclass Board extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            theBoard: this.initTempBoard(this.props.rows, this.props.cols),\r\n            gameStarted: false\r\n        }\r\n\r\n        this.tileLeftClickedHandler = this.tileLeftClickedHandler.bind(this);\r\n        this.tileRightClickedHandler = this.tileRightClickedHandler.bind(this);\r\n        this.longClickPress = this.longClickPress.bind(this);\r\n        this.longClickRelease = this.longClickRelease.bind(this);\r\n    }\r\n\r\n    /* Resets the board after a win/loss, evokes parent functions to reset counters */\r\n    resetBoard(rows, cols) {\r\n       \r\n        console.log(\"resetting...\");\r\n\r\n        this.props.stopTimer();\r\n        this.props.resetTimer();\r\n        this.props.resetFlags();\r\n\r\n        this.setState(() => ({\r\n            theBoard: this.initTempBoard(rows, cols),\r\n            gameStarted: false\r\n        }))\r\n    }\r\n\r\n    /* Changes state of the Board (i.e. rows, cols, etc) based on changed parent state */\r\n    changeDifficulty(rows, cols) {\r\n        \r\n        this.setState(() => ({\r\n            theBoard: this.initTempBoard(rows, cols),\r\n            gameStarted: false\r\n        }))\r\n\r\n        this.props.stopTimer();\r\n        this.props.resetTimer();\r\n    }\r\n\r\n    /* Creates an empty array with dimensions of the board */\r\n    createEmptyBoard(rows, cols) {\r\n\r\n        let theBoard = [];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n\r\n            theBoard.push([]);\r\n\r\n            for (let j = 0; j < cols; j++) {\r\n\r\n                theBoard[i][j] = {\r\n                    row: i,\r\n                    col: j,\r\n                    mine: false,\r\n                    mineCount: 0,\r\n                    revealed: false,\r\n                    flag: false\r\n                };\r\n\r\n            }\r\n        }\r\n\r\n        return theBoard;\r\n    }\r\n\r\n    /* Returns a random integer */\r\n    getRandomInt(max) {\r\n        return Math.floor(Math.random() * Math.floor(max));\r\n    }\r\n\r\n    /* Checks all surrounding tiles to the initial clicked tile */\r\n    checkProximity(row, col, theRow, theCol) {\r\n\r\n        /* mine cant be on this tile */\r\n        if (row === theRow && col === theCol) {\r\n            return false;\r\n        }\r\n\r\n        /* mine cant be above this tile */\r\n        if (row === theRow - 1 && col === theCol) {\r\n            return false;\r\n        }\r\n\r\n        /* mine cant be below this tile */\r\n        if (row === theRow + 1 && col === theCol) {\r\n            return false;\r\n        }\r\n\r\n        /* mine cant be left of this tile */\r\n        if (row === theRow && col === theCol - 1) {\r\n            return false;\r\n        }\r\n\r\n        /* mine cant be right of this tile */\r\n        if (row === theRow && col === theCol + 1) {\r\n            return false;\r\n        }\r\n\r\n        /* mine cant be above and to the left of this tile */\r\n        if (row === theRow - 1 && col === theCol - 1) {\r\n            return false;\r\n        }\r\n\r\n        /* mine cant be above and to the right of this tile */\r\n        if (row === theRow - 1 && col === theCol + 1) {\r\n            return false;\r\n        }\r\n\r\n        /* mine cant be below and to the left of this tile */\r\n        if (row === theRow + 1 && col === theCol - 1) {\r\n            return false;\r\n        }\r\n\r\n        /* mine cant be below and to the right of this tile */\r\n        if (row === theRow + 1 && col === theCol + 1) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /* Places mines around the board, won't place mine on, or around intial tile clicked */\r\n    placeMines(theBoard, theRow, theCol) {\r\n\r\n        let { rows, cols, mines } = this.props;\r\n        let r, c, m = 0;\r\n\r\n        while (m < mines) {\r\n\r\n            while (true) {\r\n\r\n                r = this.getRandomInt(rows);\r\n                c = this.getRandomInt(cols);\r\n\r\n                /* make sure random x isnt intial click xpos */\r\n                if (this.checkProximity(r, c, theRow, theCol)) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!(theBoard[r][c].mine)) {\r\n                theBoard[r][c].mine = true;\r\n                m++;\r\n            }\r\n\r\n        }\r\n\r\n        return theBoard;\r\n    }\r\n\r\n    /* Gets all the valid tiles surrounding a source tile */\r\n    checkSurroundingArea(theRow, theCol, theBoard) {\r\n\r\n        let temp = [];\r\n        let { rows, cols } = this.props;\r\n\r\n        /* up */\r\n        if (theRow > 0) {\r\n            temp.push(theBoard[theRow - 1][theCol]);\r\n        }\r\n\r\n        /* down */\r\n        if (theRow < rows - 1) {\r\n            temp.push(theBoard[theRow + 1][theCol]);\r\n        }\r\n\r\n        /* left */\r\n        if (theCol > 0) {\r\n            temp.push(theBoard[theRow][theCol - 1]);\r\n        }\r\n\r\n        /* right */\r\n        if (theCol < cols - 1) {\r\n            temp.push(theBoard[theRow][theCol + 1]);\r\n        }\r\n\r\n        /* up left */\r\n        if (theRow > 0 && theCol > 0) {\r\n            temp.push(theBoard[theRow - 1][theCol - 1]);\r\n        }\r\n\r\n        /* up right */\r\n        if (theRow > 0 && theCol < cols - 1) {\r\n            temp.push(theBoard[theRow - 1][theCol + 1]);\r\n        }\r\n\r\n        /* down left */\r\n        if (theRow < rows - 1 && theCol > 0) {\r\n            temp.push(theBoard[theRow + 1][theCol - 1]);\r\n        }\r\n\r\n        /* down right */\r\n        if (theRow < rows - 1 && theCol < cols - 1) {\r\n            temp.push(theBoard[theRow + 1][theCol + 1]);\r\n        }\r\n\r\n        return temp;\r\n    }\r\n\r\n    /* Finds all mines surrounding a tile */\r\n    findMines(theBoard) {\r\n\r\n        let temp = theBoard;\r\n        let { rows, cols } = this.props;\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n\r\n                if (!(theBoard[i][j].mine)) {\r\n                    let numMines = 0;\r\n\r\n                    /* Get all surrounding tiles to this tile */\r\n                    let surround = this.checkSurroundingArea(i, j, temp);\r\n\r\n                    /* Check if any of the surrounding tiles are mines, and update minecount if so */\r\n                    surround.map(tile => {\r\n                        \r\n                        if (tile.mine) {\r\n                            numMines++;\r\n                        }\r\n\r\n                    });\r\n\r\n                    temp[i][j].mineCount = numMines;\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        return temp;\r\n    }\r\n\r\n    /* Gets a count of all revealed tiles to check win condition */\r\n    findRevealedTiles(theBoard) {\r\n\r\n        let {rows, cols} = this.props;\r\n        let revealed = 0;    \r\n\r\n        for(let i = 0; i < rows; i++) {\r\n            for(let j = 0; j < cols; j++) {\r\n                if(theBoard[i][j].revealed) {\r\n                    revealed += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return revealed;\r\n    }\r\n\r\n    /* Recursively uncovers all empty tiles */\r\n    uncoverEmptyTiles(theRow, theCol, theBoard) {\r\n\r\n        /* gets all surrounding tiles to tile at [xpos][ypos] */\r\n\r\n        let surround = this.checkSurroundingArea(theRow, theCol, theBoard);\r\n\r\n        surround.map(tile => {\r\n\r\n            /* Check if this tile isn't revealed, flagged or a mine and is empty */\r\n            if (!tile.mine && !tile.revealed && !tile.flag) {\r\n\r\n                theBoard[tile.row][tile.col].revealed = true;\r\n\r\n                /* since this tile is empty, check recursively all around this tile too */\r\n                if (tile.mineCount === 0) {\r\n\r\n                    this.uncoverEmptyTiles(tile.row, tile.col, theBoard);\r\n\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        return theBoard;\r\n    }\r\n\r\n    longClickPress(theRow, theCol) {\r\n        this.longClickTimer = setTimeout(() => {\r\n            this.tileRightClickedHandler(theRow, theCol);\r\n        }, 1000);\r\n    }\r\n\r\n    longClickRelease() {\r\n        clearTimeout(this.longClickTimer);\r\n    }\r\n\r\n    /* Handles flag functionality */\r\n    tileRightClickedHandler(theRow, theCol) {\r\n\r\n        let {theBoard} = this.state;\r\n\r\n        let temp = theBoard;\r\n\r\n        /* if the tile is revealed already, do nothing */\r\n        if (temp[theRow][theCol].revealed) {\r\n            return null;\r\n        }\r\n\r\n        /* if the tile is flagged, unflag it, else flag it */\r\n        if (temp[theRow][theCol].flag) {\r\n\r\n            /* Call parent increment function */\r\n            this.props.increment();\r\n            temp[theRow][theCol].flag = false;\r\n\r\n        } else {\r\n\r\n            /* Call parent decrement function */\r\n            this.props.decrement();\r\n            temp[theRow][theCol].flag = true;\r\n\r\n        }\r\n\r\n        this.setState(() => ({\r\n            theBoard: temp\r\n        }))\r\n    }\r\n\r\n    revealMines(rows, cols) {\r\n\r\n        let {theBoard} = this.state;\r\n\r\n        for(let i = 0; i < rows; i++) {\r\n            for(let j = 0; j < cols; j++) {\r\n\r\n                if(theBoard[i][j].mine) {\r\n                    theBoard[i][j].revealed = true;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        this.setState(() => ({\r\n            theBoard: theBoard\r\n        }))\r\n    }\r\n\r\n    /* Handles tile click functionality */\r\n    tileLeftClickedHandler(theRow, theCol) {\r\n\r\n        let { rows, cols, mines } = this.props;\r\n        let { gameStarted, theBoard } = this.state;\r\n\r\n        /* Get count of revealed tiles */\r\n        let revealed = this.findRevealedTiles(theBoard);\r\n        let safeTiles = (rows * cols) - mines;\r\n\r\n        let temp = theBoard;\r\n\r\n        /* If condition is true, player has won, resets game */\r\n        if(revealed === safeTiles - 1) {\r\n           \r\n            alert(\"You Win!\");\r\n            this.resetBoard(rows, cols);\r\n            return null;\r\n\r\n        }\r\n\r\n        /* game has not been started, start game */\r\n        if (!gameStarted) {\r\n\r\n            this.setState(() => ({\r\n                theBoard: this.initRealBoard(theRow, theCol, rows, cols),\r\n                gameStarted: true\r\n            }))\r\n\r\n        } else {\r\n\r\n            console.log(`Row: ${theRow}, Col: ${theCol}, Revealed: ${temp[theRow][theCol].revealed}, Flag: ${temp[theRow][theCol].flag}, Mine: ${temp[theRow][theCol].mine}, Mine Count: ${temp[theRow][theCol].mineCount}`);\r\n\r\n            /* if game started uncover tile */\r\n\r\n            /* if the tile is revealed already, do nothing */\r\n            if (temp[theRow][theCol].revealed) {\r\n                return null;\r\n            }\r\n\r\n            /* if the tile is flagged, do nothing */\r\n            if (temp[theRow][theCol].flag) {\r\n                return null;\r\n            }\r\n\r\n            /* if the tile is a mine, player loses, resets game */\r\n            if (temp[theRow][theCol].mine) {\r\n            \r\n                alert(\"You Lost...\");\r\n                this.resetBoard(rows, cols);\r\n                return null;\r\n\r\n            }\r\n                \r\n            /* if the tile has no surrounding mines, uncover all surrounding empty tiles recursively */\r\n            if (temp[theRow][theCol].mineCount === 0) {\r\n\r\n                temp[theRow][theCol].revealed = true;\r\n                temp = this.uncoverEmptyTiles(theRow, theCol, temp);\r\n\r\n            } else {\r\n\r\n                /* else the tile has a surrounding mine, reveal this tile */\r\n                temp[theRow][theCol].revealed = true;\r\n\r\n            }\r\n\r\n            this.setState(() => ({\r\n                theBoard: temp,\r\n            }))\r\n        }\r\n    }\r\n\r\n\r\n    /* Initializes an empty board with no mines, this is for the initial click, prevents default right click functionality */\r\n    initTempBoard(rows, cols) {\r\n        \r\n        let theBoard = this.createEmptyBoard(rows, cols);\r\n\r\n        document.addEventListener(\"contextmenu\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        return theBoard;\r\n    }\r\n\r\n    /* After initial click, creates board and populates with all necessary data (i.e. mines, counts etc) */\r\n    initRealBoard(xpos, ypos, rows, cols) {\r\n\r\n        let theBoard = this.createEmptyBoard(rows, cols);\r\n        theBoard = this.placeMines(theBoard, xpos, ypos)\r\n        theBoard = this.findMines(theBoard);\r\n        theBoard = this.uncoverEmptyTiles(xpos, ypos, theBoard);\r\n        \r\n        /* Start timer when game really begins */\r\n        this.props.startTimer();\r\n\r\n        return theBoard;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            /* Row of table */\r\n            this.state.theBoard.map((tile, row) => {\r\n                return (\r\n                    <tr row={row}>\r\n                        {tile.map((tile, col) => {\r\n                            return (\r\n                                /* Individual tile of table */\r\n                                <Tile\r\n                                    row={row}\r\n                                    col={col}\r\n                                    tile={tile}\r\n                                    clickHandler={this.tileLeftClickedHandler}\r\n                                    contextHandler={this.tileRightClickedHandler}\r\n                                    onMouseDown={this.longClickPress}\r\n                                    onMouseUp={this.longClickRelease}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </tr>\r\n                );\r\n            })\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board","import React, { Component } from 'react'\r\nimport Board from './Board'\r\nimport Dropdown from 'react-bootstrap/Dropdown' \r\nimport DropdownButton from 'react-bootstrap/DropdownButton'\r\n\r\n/* Parent Component */\r\n\r\nclass Minesweeper extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            rows: 0,\r\n            cols: 0,\r\n            mines: 0,\r\n            flags: 0,\r\n            time: 0,\r\n            start: 0\r\n        }\r\n\r\n        this.boardElement = React.createRef();\r\n        this.decrement = this.decrement.bind(this);\r\n        this.increment = this.increment.bind(this);\r\n        this.changeDifficulty = this.changeDifficulty.bind(this);\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.stopTimer = this.stopTimer.bind(this);\r\n        this.resetTimer = this.resetTimer.bind(this);\r\n        this.resetFlags = this.resetFlags.bind(this);\r\n    }\r\n\r\n    /* Checks screen size before game begins, to show correct formatting per device */\r\n    componentWillMount() {\r\n\r\n        console.log(\"checking screen...\");\r\n        \r\n        let r, c, m, f = 0;\r\n\r\n        if(window.screen.width <= 768) {\r\n                \r\n            console.log(\"mobile...\");\r\n            r = 11;\r\n            c = 7;\r\n            m = 10;\r\n            f = 10;\r\n\r\n        } else {\r\n            \r\n            r = 8;\r\n            c = 10;\r\n            m = 10;\r\n            f = 10;\r\n\r\n        }\r\n\r\n        this.setState(() => ({\r\n            rows: r,\r\n            cols: c,\r\n            mines: m,\r\n            flags: f\r\n        }))\r\n    }\r\n\r\n    /* Handles decrementing flag count */\r\n    decrement() {\r\n\r\n        console.log(\"in decrement...\");\r\n\r\n        let f = this.state.flags - 1;\r\n\r\n        this.setState((prevState, props) => ({\r\n            flags: f\r\n        }))\r\n    }\r\n\r\n    /* Handles incrementing flag count */\r\n    increment() {\r\n\r\n        console.log(\"in increment...\");\r\n\r\n        let f = this.state.flags + 1;\r\n\r\n        this.setState((prevState, props) => ({\r\n            flags: f\r\n        }))\r\n    }\r\n    \r\n    /* Changes row, col, mine and flag values based on difficulty selected */\r\n    changeDifficulty(difficulty) {\r\n\r\n        let r, c, m, f = 0\r\n\r\n        if(difficulty === \"easy\") {\r\n\r\n            if(window.screen.width <= 768) {\r\n                \r\n                r = 11;\r\n                c = 7;\r\n                m = 10;\r\n                f = 10;\r\n\r\n            } else {\r\n                \r\n                r = 8;\r\n                c = 10;\r\n                m = 10;\r\n                f = 10;\r\n\r\n            }\r\n            \r\n            this.setState((prevState, props) => ({\r\n                rows: r,\r\n                cols: c,\r\n                mines: m,\r\n                flags: f\r\n            }))\r\n        }\r\n\r\n        if(difficulty === \"medium\") {\r\n\r\n            if(window.screen.width <= 768) {\r\n                \r\n                r = 18;\r\n                c = 11;\r\n                m = 40;\r\n                f = 40;\r\n\r\n            } else {\r\n                \r\n                r = 14;\r\n                c = 18;\r\n                m = 40;\r\n                f = 40;\r\n\r\n            }\r\n                \r\n            this.setState((prevState, props) => ({\r\n                rows: r,\r\n                cols: c,\r\n                mines: m,\r\n                flags: f\r\n            }))\r\n        }\r\n\r\n        /* Calls child changeDifficulty function to change childs state accordingly */\r\n        this.boardElement.current.changeDifficulty(r, c);\r\n    }\r\n\r\n    /* Starts the timer */\r\n    startTimer() {\r\n    \r\n        this.setState({\r\n            start: Date.now()\r\n        });\r\n\r\n        this.timer = setInterval( () => this.setState ({\r\n            time: Date.now() - this.state.start\r\n        }), 1000)\r\n    }\r\n\r\n    /* Stops the timer */\r\n    stopTimer() {\r\n\r\n        /* setInterval gets called twice for some reason, so clear both intervals */\r\n        clearInterval(this.timer - 1);\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n    /* Reset the timer to zero */\r\n    resetTimer() {\r\n        this.setState({\r\n            time: 0,\r\n            start: Date.now()\r\n        });\r\n    }\r\n    \r\n    /* Set flag count back to  */\r\n    resetFlags() {\r\n        this.setState({\r\n            flags: this.state.mines\r\n        });\r\n    }\r\n\r\n    /* Renders the game board using a table */\r\n    render() {\r\n\r\n        let { rows, cols, mines, flags, time } = this.state;\r\n        return (\r\n            <div className=\"the-game\">\r\n                <table>            \r\n                    <thead>\r\n                        <tr>\r\n                            <th colSpan={cols}>\r\n                                <div className=\"col\">Flags: {flags}</div>\r\n                                <div className=\"col\">Timer: {Math.floor(time / 1000)}</div>\r\n                                <div className=\"col\">\r\n                                    <DropdownButton id=\"dropdown-basic-button\" title=\"Difficulty\">\r\n                                        <Dropdown.Item eventKey=\"easy\" onSelect={this.changeDifficulty}>Easy</Dropdown.Item>\r\n                                        <Dropdown.Item eventKey=\"medium\" onSelect={this.changeDifficulty}>Medium</Dropdown.Item>\r\n                                    </DropdownButton>\r\n                                </div>\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    \r\n                    <tbody>\r\n                        <Board \r\n                            ref={this.boardElement}\r\n                            rows={rows} \r\n                            cols={cols} \r\n                            mines={mines}\r\n                            decrement={this.decrement}\r\n                            increment={this.increment}\r\n                            startTimer={this.startTimer}\r\n                            stopTimer={this.stopTimer}\r\n                            resetTimer={this.resetTimer}\r\n                            resetFlags={this.resetFlags}\r\n                        />\r\n                    </tbody>\r\n                    \r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Minesweeper\r\n","import React from 'react';\nimport './App.css';\nimport Minesweeper from './minesweeper-components/Minesweeper';\n\nfunction App() {\n\n  return (\n      <div className=\"App\">\n      \n      <Minesweeper/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}